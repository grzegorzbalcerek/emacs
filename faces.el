
(defface aqu '((t (:foreground "#00ffff"))) "foreground aqua/cyan")
(defface bla '((t (:foreground "#000000"))) "foreground black")
(defface blu '((t (:foreground "#0000ff"))) "foreground blue")
(defface fuc '((t (:foreground "#ff00ff"))) "foreground fuchsia/magenta")
(defface gra '((t (:foreground "gray75"))) "foreground gray75")
(defface gre '((t (:foreground "#008000"))) "foreground green")
(defface lim '((t (:foreground "#00ff00"))) "foreground lime")
(defface mar '((t (:foreground "#800000"))) "foreground maroon/brown")
(defface nav '((t (:foreground "#000080"))) "foreground navy")
(defface oli '((t (:foreground "#808000"))) "foreground olive")
(defface ora '((t (:foreground "#ff8000"))) "foreground orange")
(defface pin '((t (:foreground "#ff80ff"))) "foreground pink")
(defface red '((t (:foreground "#ff0000"))) "foreground red")
(defface sky '((t (:foreground "#0080ff"))) "foreground sky blue")
(defface tea '((t (:foreground "#008080"))) "foreground teal")
(defface whi '((t (:foreground "#ffffff"))) "foreground white")
(defface vio '((t (:foreground "#8000ff"))) "foreground violet")
(defface yel '((t (:foreground "#ffff00"))) "foreground yellow")

(defface aqub '((t (:foreground "#00ffff" :weight bold))) "foreground aqua/cyan bold")
(defface blab '((t (:foreground "#000000" :weight bold))) "foreground black bold")
(defface blub '((t (:foreground "#0000ff" :weight bold))) "foreground blue bold")
(defface fucb '((t (:foreground "#ff00ff" :weight bold))) "foreground fuchsia/magenta bold")
(defface grab '((t (:foreground "gray75") :weight bold)) "foreground gray75 bold")
(defface greb '((t (:foreground "#008000" :weight bold))) "foreground green bold")
(defface limb '((t (:foreground "#00ff00" :weight bold))) "foreground lime bold")
(defface marb '((t (:foreground "#800000" :weight bold))) "foreground maroon/brown bold")
(defface navb '((t (:foreground "#000080" :weight bold))) "foreground navy bold")
(defface olib '((t (:foreground "#808000" :weight bold))) "foreground olive bold")
(defface orab '((t (:foreground "#ff8000" :weight bold))) "foreground orange bold")
(defface pinb '((t (:foreground "#ff80ff" :weight bold))) "foreground pink bold")
(defface redb '((t (:foreground "#ff0000" :weight bold))) "foreground red bold")
(defface skyb '((t (:foreground "#0080ff" :weight bold))) "foreground sky blue bold")
(defface teab '((t (:foreground "#008080" :weight bold))) "foreground teal bold")
(defface whib '((t (:foreground "#ffffff" :weight bold))) "foreground white bold")
(defface viob '((t (:foreground "#8000ff" :weight bold))) "foreground violet bold")
(defface yelb '((t (:foreground "#ffff00" :weight bold))) "foreground yellow bold")

(defface baqu '((t (:background "#00ffff"))) "background aqua/cyan")
(defface bbla '((t (:background "#000000"))) "background black")
(defface bblu '((t (:background "#0000ff"))) "background blue")
(defface bfuc '((t (:background "#ff00ff"))) "background fuchsia/magenta")
(defface bgra '((t (:background "gray75"))) "background gray75")
(defface bgre '((t (:background "#008000"))) "background green")
(defface blim '((t (:background "#00ff00"))) "background lime")
(defface bmar '((t (:background "#800000"))) "background maroon/brown")
(defface bnav '((t (:background "#000080"))) "background navy")
(defface boli '((t (:background "#808000"))) "background olive")
(defface bora '((t (:background "#ff8000"))) "background orange")
(defface bpin '((t (:background "#ff80ff"))) "background pink")
(defface bred '((t (:background "#ff0000"))) "background red")
(defface bsky '((t (:background "#0080ff"))) "background sky blue")
(defface btea '((t (:background "#008080"))) "background teal")
(defface bwhi '((t (:background "#ffffff"))) "background white")
(defface bvio '((t (:background "#8000ff"))) "background violet")
(defface byel '((t (:background "#ffff00"))) "background yellow")

(defface header1 '((t (:weight bold :height 1.15))) "weight bold height 1.15")
(defface header2 '((t (:weight bold :height 1.10))) "weight bold height 1.10")
(defface header3 '((t (:weight bold :height 1.05))) "weight bold height 1.05")
(defface half '((t (:height 0.5))) "height 0.5")
(defface small '((t (:height 0.75))) "height 0.75")

(defun set-face-region-or-word(face beg end reset)
  (interactive)
  (cond
   (mark-active
    (progn
      ;(message "Setting face %s to region" face)
      (if reset (facemenu-set-face 'default beg end))
      (facemenu-set-face face beg end)))
   ((and (looking-at "[ \n]") (looking-back " "))
    (facemenu-set-face (car face)))
   (t
    (progn
      ;(message "Setting face %s to word" face)
      (save-excursion
        (if (looking-at "[.,;Â· \n]")
            (left-char 1))
        (forward-word 1)
        (let ((end (point)))
          (backward-word 1)
          (if reset (facemenu-set-face 'default (point) end))
          (facemenu-set-face face (point) end)))))))

(defun set-face-region-or-row(face beg end)
  (interactive)
  (cond
   (mark-active
    (progn
      ;(message "Setting face %s to region" face)
      (facemenu-set-face face beg end)))
   ((and (looking-at "[ \n]") (looking-back " "))
    (facemenu-set-face (car face)))
   (t
    (progn
      ;(message "Setting face %s to region" face)
      (facemenu-set-face face (line-beginning-position) (line-end-position))))))

(setq enriched-translations
      '((face
         (half "half")
         (header1 "header1")
         (header2 "header2")
         (header3 "header3")
         (small "small")
         (aqu "aqu")
         (bla "bla")
         (blu "blu")
         (fuc "fuc")
         (gra "gra")
         (gre "gre")
         (lim "lim")
         (mar "mar")
         (nav "nav")
         (oli "oli")
         (ora "ora")
         (pin "pin")
         (red "red")
         (sky "sky")
         (tea "tea")
         (whi "whi")
         (vio "vio")
         (yel "yel")
         (aqub "aqub")
         (blab "blab")
         (blub "blub")
         (fucb "fucb")
         (grab "grab")
         (greb "greb")
         (limb "limb")
         (marb "marb")
         (navb "navb")
         (olib "olib")
         (orab "orab")
         (pinb "pinb")
         (redb "redb")
         (skyb "skyb")
         (teab "teab")
         (whib "whib")
         (viob "viob")
         (yelb "yelb")
         (baqu "baqu")
         (bbla "bbla")
         (bblu "bblu")
         (bfuc "bfuc")
         (bgra "bgra")
         (bgre "bgre")
         (blim "blim")
         (bmar "bmar")
         (bnav "bnav")
         (boli "boli")
         (bora "bora")
         (bpin "bpin")
         (bred "bred")
         (bsky "bsky")
         (btea "btea")
         (bwhi "bwhi")
         (bvio "bvio")
         (byel "byel")
         (bold-italic "bi")
         (bold "b")
         (italic "i")
         (underline "u")
         (fixed "fixed")
         (excerpt "excerpt")
         (default)
         (nil enriched-encode-other-face))
        (left-margin
         (4 "indent"))
        (right-margin
         (4 "indentright"))
        (justification
         (none "nofill")
         (right "flushright")
         (left "flushleft")
         (full "flushboth")
         (center "center"))
        (PARAMETER
         (t "param"))
        (FUNCTION
         (enriched-decode-foreground "x-color")
         (enriched-decode-background "x-bg-color")
         (enriched-decode-display-prop "x-display")
         (enriched-decode-charset "x-charset"))
        (read-only
         (t "x-read-only"))
        (display
         (nil enriched-handle-display-prop))
        (charset
         (nil enriched-handle-charset-prop))
        (unknown
         (nil format-annotate-value))))

(defun show-face()
  (interactive)
  (message "face: %s" (get-text-property (point) 'face)))

(defun defaultify-blanks-region(beg end)
  "set the default face for spaces and newlines in region"
  (interactive "r")
  (let ((begm (copy-marker beg nil))
        (endm (copy-marker end t)))
    (save-excursion
      (goto-char begm)
      (while (< (point) endm)
        (if (looking-at "[ \n]")
            (facemenu-set-face 'default (point) (1+ (point))))
        (right-char)))))

(define-minor-mode faces-minor-mode
  "Toggle Faces minor mode.
   When mode is enabled defines letter keys
   to set certain faces at the word at point"
  nil
  " Faces"
  '(
    ("a" . (lambda(b e)(interactive "r")(set-face-region-or-word 'aqu b e t)))
    ("c" . (lambda(b e)(interactive "r")(set-face-region-or-word 'blu b e t)))
    ("e" . (lambda(b e)(interactive "r")(set-face-region-or-word 'ora b e t)))
    ("f" . (lambda(b e)(interactive "r")(set-face-region-or-word 'fuc b e t)))
    ("g" . (lambda(b e)(interactive "r")(set-face-region-or-word 'gre b e t)))
    ("k" . (lambda(b e)(interactive "r")(set-face-region-or-word 'lim b e t)))
    ("m" . (lambda(b e)(interactive "r")(set-face-region-or-word 'mar b e t)))
    ("n" . (lambda(b e)(interactive "r")(set-face-region-or-word 'nav b e t)))
    ("p" . (lambda(b e)(interactive "r")(set-face-region-or-word 'pin b e t)))
    ("q" . (lambda(b e)(interactive "r")(set-face-region-or-word 'oli b e t)))
    ("r" . (lambda(b e)(interactive "r")(set-face-region-or-word 'red b e t)))
    ("s" . (lambda(b e)(interactive "r")(set-face-region-or-word 'sky b e t)))
    ("t" . (lambda(b e)(interactive "r")(set-face-region-or-word 'tea b e t)))
    ("v" . (lambda(b e)(interactive "r")(set-face-region-or-word 'vio b e t)))
    ("w" . (lambda(b e)(interactive "r")(set-face-region-or-word 'whi b e t)))
    ("x" . (lambda(b e)(interactive "r")(set-face-region-or-word 'gra b e t)))
    ("y" . (lambda(b e)(interactive "r")(set-face-region-or-word 'yel b e t)))
    ("z" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bla b e t)))

    ("A" . (lambda(b e)(interactive "r")(set-face-region-or-word 'aqub b e t)))
    ("C" . (lambda(b e)(interactive "r")(set-face-region-or-word 'blub b e t)))
    ("E" . (lambda(b e)(interactive "r")(set-face-region-or-word 'orab b e t)))
    ("F" . (lambda(b e)(interactive "r")(set-face-region-or-word 'fucb b e t)))
    ("G" . (lambda(b e)(interactive "r")(set-face-region-or-word 'greb b e t)))
    ("K" . (lambda(b e)(interactive "r")(set-face-region-or-word 'limb b e t)))
    ("M" . (lambda(b e)(interactive "r")(set-face-region-or-word 'marb b e t)))
    ("N" . (lambda(b e)(interactive "r")(set-face-region-or-word 'navb b e t)))
    ("P" . (lambda(b e)(interactive "r")(set-face-region-or-word 'pinb b e t)))
    ("Q" . (lambda(b e)(interactive "r")(set-face-region-or-word 'olib b e t)))
    ("R" . (lambda(b e)(interactive "r")(set-face-region-or-word 'redb b e t)))
    ("S" . (lambda(b e)(interactive "r")(set-face-region-or-word 'skyb b e t)))
    ("T" . (lambda(b e)(interactive "r")(set-face-region-or-word 'teab b e t)))
    ("V" . (lambda(b e)(interactive "r")(set-face-region-or-word 'viob b e t)))
    ("W" . (lambda(b e)(interactive "r")(set-face-region-or-word 'whib b e t)))
    ("X" . (lambda(b e)(interactive "r")(set-face-region-or-word 'grab b e t)))
    ("Y" . (lambda(b e)(interactive "r")(set-face-region-or-word 'yelb b e t)))
    ("Z" . (lambda(b e)(interactive "r")(set-face-region-or-word 'blab b e t)))

    ("<C-a>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'aqu b e nil)))
    ("<C-c>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'blu b e nil)))
    ("<C-e>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'ora b e nil)))
    ("<C-f>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'fuc b e nil)))
    ("<C-g>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'gre b e nil)))
    ("<C-k>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'lim b e nil)))
    ("<C-m>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'mar b e nil)))
    ("<C-n>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'nav b e nil)))
    ("<C-p>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'pin b e nil)))
    ("<C-q>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'oli b e nil)))
    ("<C-r>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'red b e nil)))
    ("<C-s>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'sky b e nil)))
    ("<C-t>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'tea b e nil)))
    ("<C-v>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'vio b e nil)))
    ("<C-w>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'whi b e nil)))
    ("<C-x>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'gra b e nil)))
    ("<C-y>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'yel b e nil)))
    ("<C-z>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bla b e nil)))

    ("<M-a>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'baqu b e nil)))
    ("<M-c>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bblu b e nil)))
    ("<M-e>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bora b e nil)))
    ("<M-f>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bfuc b e nil)))
    ("<M-g>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bgre b e nil)))
    ("<M-k>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'blim b e nil)))
    ("<M-m>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bmar b e nil)))
    ("<M-n>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bnav b e nil)))
    ("<M-p>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bpin b e nil)))
    ("<M-q>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'boli b e nil)))
    ("<M-r>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bred b e nil)))
    ("<M-s>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bsky b e nil)))
    ("<M-t>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'btea b e nil)))
    ("<M-v>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bvio b e nil)))
    ("<M-w>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bwhi b e nil)))
    ("<M-x>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bgra b e nil)))
    ("<M-y>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'byel b e nil)))
    ("<M-z>" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bbla b e nil)))

    ("1" . (lambda(b e)(interactive "r")(set-face-region-or-row 'header1 b e)))
    ("2" . (lambda(b e)(interactive "r")(set-face-region-or-row 'header2 b e)))
    ("3" . (lambda(b e)(interactive "r")(set-face-region-or-row 'header3 b e)))
    ("4" . (lambda(b e)(interactive "r")(set-face-region-or-row 'default b e)))
    ("5" . (lambda(b e)(interactive "r")(set-face-region-or-row 'half b e)))
    ("6" . (lambda(b e)(interactive "r")(set-face-region-or-row 'small b e)))
    ("9" . 'facemenu-set-invisible)
    ("0" . 'facemenu-remove-special)

    ("i" . (lambda(b e)(interactive "r")(set-face-region-or-word 'italic b e nil)))
    ("l" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bold-italic b e nil)))
    ("b" . (lambda(b e)(interactive "r")(set-face-region-or-word 'bold b e nil)))
    ("d" . (lambda(b e)(interactive "r")(set-face-region-or-word 'default b e nil)))
    ("u" . (lambda(b e)(interactive "r")(set-face-region-or-word 'underline b e nil)))
    )
  (if faces-minor-mode
      (set-face-background 'cursor "red")
    (set-face-background 'cursor "black"))
  )

(global-set-key (kbd "M-o a") 'set-face-aqu-region-or-word)
(global-set-key (kbd "M-o a") (lambda(b e)(interactive "r")(set-face-region-or-word 'aqu b e t)))
(global-set-key (kbd "M-o c") (lambda(b e)(interactive "r")(set-face-region-or-word 'blu b e t)))
(global-set-key (kbd "M-o e") (lambda(b e)(interactive "r")(set-face-region-or-word 'ora b e t)))
(global-set-key (kbd "M-o f") (lambda(b e)(interactive "r")(set-face-region-or-word 'fuc b e t)))
(global-set-key (kbd "M-o g") (lambda(b e)(interactive "r")(set-face-region-or-word 'gre b e t)))
(global-set-key (kbd "M-o j") (lambda(b e)(interactive "r")(set-face-region-or-word 'mar b e t)))
(global-set-key (kbd "M-o k") (lambda(b e)(interactive "r")(set-face-region-or-word 'lim b e t)))
(global-set-key (kbd "M-o n") (lambda(b e)(interactive "r")(set-face-region-or-word 'nav b e t)))
(global-set-key (kbd "M-o p") (lambda(b e)(interactive "r")(set-face-region-or-word 'pin b e t)))
(global-set-key (kbd "M-o q") (lambda(b e)(interactive "r")(set-face-region-or-word 'oli b e t)))
(global-set-key (kbd "M-o r") (lambda(b e)(interactive "r")(set-face-region-or-word 'red b e t)))
(global-set-key (kbd "M-o s") (lambda(b e)(interactive "r")(set-face-region-or-word 'sky b e t)))
(global-set-key (kbd "M-o t") (lambda(b e)(interactive "r")(set-face-region-or-word 'tea b e t)))
(global-set-key (kbd "M-o v") (lambda(b e)(interactive "r")(set-face-region-or-word 'vio b e t)))
(global-set-key (kbd "M-o w") (lambda(b e)(interactive "r")(set-face-region-or-word 'whi b e t)))
(global-set-key (kbd "M-o x") (lambda(b e)(interactive "r")(set-face-region-or-word 'gra b e t)))
(global-set-key (kbd "M-o y") (lambda(b e)(interactive "r")(set-face-region-or-word 'yel b e t)))
(global-set-key (kbd "M-o z") (lambda(b e)(interactive "r")(set-face-region-or-word 'bla b e t)))

(global-set-key (kbd "M-o A") (lambda(b e)(interactive "r")(set-face-region-or-word 'aqub b e t)))
(global-set-key (kbd "M-o C") (lambda(b e)(interactive "r")(set-face-region-or-word 'blub b e t)))
(global-set-key (kbd "M-o E") (lambda(b e)(interactive "r")(set-face-region-or-word 'orab b e t)))
(global-set-key (kbd "M-o F") (lambda(b e)(interactive "r")(set-face-region-or-word 'fucb b e t)))
(global-set-key (kbd "M-o G") (lambda(b e)(interactive "r")(set-face-region-or-word 'greb b e t)))
(global-set-key (kbd "M-o J") (lambda(b e)(interactive "r")(set-face-region-or-word 'marb b e t)))
(global-set-key (kbd "M-o K") (lambda(b e)(interactive "r")(set-face-region-or-word 'limb b e t)))
(global-set-key (kbd "M-o N") (lambda(b e)(interactive "r")(set-face-region-or-word 'navb b e t)))
(global-set-key (kbd "M-o P") (lambda(b e)(interactive "r")(set-face-region-or-word 'pinb b e t)))
(global-set-key (kbd "M-o Q") (lambda(b e)(interactive "r")(set-face-region-or-word 'olib b e t)))
(global-set-key (kbd "M-o R") (lambda(b e)(interactive "r")(set-face-region-or-word 'redb b e t)))
(global-set-key (kbd "M-o S") (lambda(b e)(interactive "r")(set-face-region-or-word 'skyb b e t)))
(global-set-key (kbd "M-o T") (lambda(b e)(interactive "r")(set-face-region-or-word 'teab b e t)))
(global-set-key (kbd "M-o V") (lambda(b e)(interactive "r")(set-face-region-or-word 'viob b e t)))
(global-set-key (kbd "M-o W") (lambda(b e)(interactive "r")(set-face-region-or-word 'whib b e t)))
(global-set-key (kbd "M-o X") (lambda(b e)(interactive "r")(set-face-region-or-word 'grab b e t)))
(global-set-key (kbd "M-o Y") (lambda(b e)(interactive "r")(set-face-region-or-word 'yelb b e t)))
(global-set-key (kbd "M-o Z") (lambda(b e)(interactive "r")(set-face-region-or-word 'blab b e t)))

(global-set-key (kbd "M-o C-a") (lambda(b e)(interactive "r")(set-face-region-or-word 'aqu b e nil)))
(global-set-key (kbd "M-o C-c") (lambda(b e)(interactive "r")(set-face-region-or-word 'blu b e nil)))
(global-set-key (kbd "M-o C-e") (lambda(b e)(interactive "r")(set-face-region-or-word 'ora b e nil)))
(global-set-key (kbd "M-o C-f") (lambda(b e)(interactive "r")(set-face-region-or-word 'fuc b e nil)))
(global-set-key (kbd "M-o C-g") (lambda(b e)(interactive "r")(set-face-region-or-word 'gre b e nil)))
(global-set-key (kbd "M-o C-j") (lambda(b e)(interactive "r")(set-face-region-or-word 'mar b e nil)))
(global-set-key (kbd "M-o C-k") (lambda(b e)(interactive "r")(set-face-region-or-word 'lim b e nil)))
(global-set-key (kbd "M-o C-n") (lambda(b e)(interactive "r")(set-face-region-or-word 'nav b e nil)))
(global-set-key (kbd "M-o C-p") (lambda(b e)(interactive "r")(set-face-region-or-word 'pin b e nil)))
(global-set-key (kbd "M-o C-q") (lambda(b e)(interactive "r")(set-face-region-or-word 'oli b e nil)))
(global-set-key (kbd "M-o C-r") (lambda(b e)(interactive "r")(set-face-region-or-word 'red b e nil)))
(global-set-key (kbd "M-o C-s") (lambda(b e)(interactive "r")(set-face-region-or-word 'sky b e nil)))
(global-set-key (kbd "M-o C-t") (lambda(b e)(interactive "r")(set-face-region-or-word 'tea b e nil)))
(global-set-key (kbd "M-o C-v") (lambda(b e)(interactive "r")(set-face-region-or-word 'vio b e nil)))
(global-set-key (kbd "M-o C-w") (lambda(b e)(interactive "r")(set-face-region-or-word 'whi b e nil)))
(global-set-key (kbd "M-o C-x") (lambda(b e)(interactive "r")(set-face-region-or-word 'gra b e nil)))
(global-set-key (kbd "M-o C-y") (lambda(b e)(interactive "r")(set-face-region-or-word 'yel b e nil)))
(global-set-key (kbd "M-o C-z") (lambda(b e)(interactive "r")(set-face-region-or-word 'bla b e nil)))

(global-set-key (kbd "M-o M-a") (lambda(b e)(interactive "r")(set-face-region-or-word 'baqu b e nil)))
(global-set-key (kbd "M-o M-c") (lambda(b e)(interactive "r")(set-face-region-or-word 'bblu b e nil)))
(global-set-key (kbd "M-o M-e") (lambda(b e)(interactive "r")(set-face-region-or-word 'bora b e nil)))
(global-set-key (kbd "M-o M-f") (lambda(b e)(interactive "r")(set-face-region-or-word 'bfuc b e nil)))
(global-set-key (kbd "M-o M-g") (lambda(b e)(interactive "r")(set-face-region-or-word 'bgre b e nil)))
(global-set-key (kbd "M-o M-j") (lambda(b e)(interactive "r")(set-face-region-or-word 'bmar b e nil)))
(global-set-key (kbd "M-o M-k") (lambda(b e)(interactive "r")(set-face-region-or-word 'blim b e nil)))
(global-set-key (kbd "M-o M-n") (lambda(b e)(interactive "r")(set-face-region-or-word 'bnav b e nil)))
(global-set-key (kbd "M-o M-p") (lambda(b e)(interactive "r")(set-face-region-or-word 'bpin b e nil)))
(global-set-key (kbd "M-o M-q") (lambda(b e)(interactive "r")(set-face-region-or-word 'boli b e nil)))
(global-set-key (kbd "M-o M-r") (lambda(b e)(interactive "r")(set-face-region-or-word 'bred b e nil)))
(global-set-key (kbd "M-o M-s") (lambda(b e)(interactive "r")(set-face-region-or-word 'bsky b e nil)))
(global-set-key (kbd "M-o M-t") (lambda(b e)(interactive "r")(set-face-region-or-word 'btea b e nil)))
(global-set-key (kbd "M-o M-v") (lambda(b e)(interactive "r")(set-face-region-or-word 'bvio b e nil)))
(global-set-key (kbd "M-o M-w") (lambda(b e)(interactive "r")(set-face-region-or-word 'bwhi b e nil)))
(global-set-key (kbd "M-o M-x") (lambda(b e)(interactive "r")(set-face-region-or-word 'bgra b e nil)))
(global-set-key (kbd "M-o M-y") (lambda(b e)(interactive "r")(set-face-region-or-word 'byel b e nil)))
(global-set-key (kbd "M-o M-z") (lambda(b e)(interactive "r")(set-face-region-or-word 'bbla b e nil)))

(global-set-key (kbd "M-o 1") (lambda(b e)(interactive "r")(set-face-region-or-row 'header1 b e)))
(global-set-key (kbd "M-o 2") (lambda(b e)(interactive "r")(set-face-region-or-row 'header2 b e)))
(global-set-key (kbd "M-o 3") (lambda(b e)(interactive "r")(set-face-region-or-row 'header3 b e)))
(global-set-key (kbd "M-o 4") (lambda(b e)(interactive "r")(set-face-region-or-row 'default b e)))
(global-set-key (kbd "M-o 5") (lambda(b e)(interactive "r")(set-face-region-or-row 'half b e)))
(global-set-key (kbd "M-o 6") (lambda(b e)(interactive "r")(set-face-region-or-row 'small b e)))
(global-set-key (kbd "M-o 9") 'facemenu-set-invisible)
(global-set-key (kbd "M-o 0") 'facemenu-remove-special)

(global-set-key (kbd "M-o i") (lambda(b e)(interactive "r")(set-face-region-or-word 'italic b e nil)))
(global-set-key (kbd "M-o l") (lambda(b e)(interactive "r")(set-face-region-or-word 'bold-italic b e nil)))
(global-set-key (kbd "M-o b") (lambda(b e)(interactive "r")(set-face-region-or-word 'bold b e nil)))
(global-set-key (kbd "M-o d") (lambda(b e)(interactive "r")(set-face-region-or-word 'default b e nil)))
(global-set-key (kbd "M-o u") (lambda(b e)(interactive "r")(set-face-region-or-word 'underline b e nil)))

(global-set-key (kbd "M-o DEL") 'defaultify-blanks-region)

                                      ;M-o m enriched-toggle-markup
                                      ;M-o o facemenu-set-face

(global-set-key [C-f12] 'show-face)
(global-set-key [f12] 'faces-minor-mode)
