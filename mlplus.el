;;; -*- lexical-biding: t -*-

(provide 'mlplus)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                        Format                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun collapse-elem(tag)
  "Collapse elements and all markup between them"
  (goto-char (point-min))
  (let ((inelem nil))
    (while (< (point) (point-max))
      (cond
       ((and (not inelem) (looking-at (concat "<" tag)))
        (setq inelem t)
        (while (not (looking-at ">")) (forward-char 1)))
       ((and inelem (looking-at (concat "</" tag ">")))
        (setq inelem nil)
        (while (not (looking-at ">")) (forward-char 1)))
       ((and inelem (looking-back ">") (looking-at "[ \n]"))
        (delete-char 1))
       (t (forward-char 1))))))

(defun collapse-passages()
  (interactive)
  (collapse-elem "passage"))

(defun collapse-subparts()
  (interactive)
  (collapse-elem "subpart"))

(defun collapse-parts()
  (interactive)
  (collapse-elem "part"))

(defun collapse-pieces()
  (interactive)
  (collapse-elem "piece"))

(defun collapse-segments()
  (interactive)
  (collapse-elem "segment"))

(defun collapse-members()
  (interactive)
  (collapse-elem "member"))

(defun collapse-terms()
  (interactive)
  (collapse-elem "term"))

(defun xmllint-format-buffer(p)
  "Collapse members and all markup between them"
  (interactive "P")
  (let ((cmd "xmllint --format --encode utf-8 -"))
    (if p
        (shell-command-on-region (point-min) (point-max) cmd t "*err*")
      (shell-command-on-region (point-min) (point-max) cmd))))

(defun set-or-replace-term-or-span-class(lvl color)
  "Find the beginning of a tag, skip it,
   find the class attribute or add it,
   remove any lvl attribute value if any,
   add the lvl plus color attribute value if color is not nil"
  (while (not (looking-at "<term\\|<span")) (backward-char))
  (if (looking-at "<term\\|<span")
      (progn
        (forward-word)
        (while (not (looking-at " class=\\|>")) (forward-char))
        (if (looking-at ">")
            (progn (insert " class=\"\"") (backward-char))
          (forward-char 8))
        (while (not (looking-at "['\"]"))
          (cond
           ((looking-at (concat lvl "[a-z][a-z][ '\"]"))
            (delete-char 5))
           ((looking-at "  ")
            (delete-char 1))
           (t (forward-char))))
        (while (looking-back " ") (delete-char -1))
        (if color
            (progn
              (if (not (looking-back "['\"]")) (insert " "))
              (insert lvl color))))))

(defun insert-span-inside-term()
  (interactive)
  (while (not (looking-back "<term")) (backward-char))
  (while (not (looking-at ">")) (forward-char))
  (forward-char)
  (save-excursion
    (insert "<span>")
    (while (not (looking-at "</term>")) (forward-char))
    (insert "</span>")))

(defun buffer-substring-until-end-of-word()
  (let ((end (save-excursion
               (re-search-forward "[ <]"))))
    (buffer-substring-no-properties (point) (- end 1))))

(defun extract-first-words-into-span()
  (interactive)
  (let ((str "<span>"))
    (save-excursion
      (while (not (looking-at "<[a-z][a-z]>")) (forward-char))
      (while (looking-at "<[a-z][a-z]>")
        (setq str (concat str (buffer-substring-no-properties (point) (+ 4 (point)))))
        (forward-char 4)
        (let ((w (buffer-substring-until-end-of-word)))
          (delete-char (length w))
          (if (looking-at " ") (delete-char 1))
          (setq str (concat str w)))
        (while (not (looking-at "</[a-z][a-z]>")) (forward-char))
        (setq str (concat str (buffer-substring-no-properties (point) (+ 5 (point)))))
        (forward-char 5)
        
      )
      )
    (setq str (concat str "</span>&#32;"))
    (insert str)
    ))

(define-skeleton comment-around "Inserts around: comment" nil "<!-- " _ " -->")
(define-skeleton tag-around-en "Inserts tag around: en" nil "<en>" _ "</en>")
(define-skeleton tag-around-fr "Inserts tag around: fr" nil "<fr>" _ "</fr>")
(define-skeleton tag-around-gr "Inserts tag around: gr" nil "<gr>" _ "</gr>")
(define-skeleton tag-around-member "Inserts tag around: member" nil "<member>" _ "</member>")
(define-skeleton tag-around-pl "Inserts tag around: pl" nil "<pl>" _ "</pl>")
(define-skeleton tag-around-segment "Inserts tag around: segment" nil "<segment>" _ "</segment>")
(define-skeleton tag-around-span "Inserts tag around: span" nil "<span>" _ "</span>")
(define-skeleton tag-around-term "Inserts tag around: term" nil "<term>" _ "</term>")
(define-skeleton tag-around-verse "Inserts tag around: verse" nil "<verse>" _ "</verse>")

(define-skeleton tag-insert-en "Inserts tags closing and opening: en" nil "</en><en>")
(define-skeleton tag-insert-fr "Inserts tags closing and opening: fr" nil "</fr><fr>")
(define-skeleton tag-insert-gr "Inserts tags closing and opening: gr" nil "</gr><gr>")
(define-skeleton tag-insert-member "Inserts tags closing and opening: member" nil "</member><member>")
(define-skeleton tag-insert-pl "Inserts tags closing and opening: pl" nil "</pl><pl>")
(define-skeleton tag-insert-segment "Inserts tags closing and opening: segment" nil "</segment><segment>")
(define-skeleton tag-insert-span "Inserts tags closing and opening: span" nil "</span><span>")
(define-skeleton tag-insert-term "Inserts tags closing and opening: term" nil "</term><term>")
(define-skeleton tag-insert-verse "Inserts tags closing and opening: verse" nil "</verse><verse>")

(defun xmlhtml-modes-customizations()
  (interactive)
  (message "xmlhtml-modes-customizations")
  (local-set-key (kbd "C-c f") 'xmllint-format-buffer)
  (local-set-key (kbd "C-c c p") 'collapse-passages)
  (local-set-key (kbd "C-c c r") 'collapse-parts)
  (local-set-key (kbd "C-c c q") 'collapse-subparts)
  (local-set-key (kbd "C-c c i") 'collapse-pieces)
  (local-set-key (kbd "C-c c s") 'collapse-segments)
  (local-set-key (kbd "C-c c m") 'collapse-members)
  (local-set-key (kbd "C-c c t") 'collapse-terms)
  (local-set-key (kbd "C-c a c") 'comment-around)
  (local-set-key (kbd "C-c a e") 'tag-around-en)
  (local-set-key (kbd "C-c a f") 'tag-around-fr)
  (local-set-key (kbd "C-c a g") 'tag-around-gr)
  (local-set-key (kbd "C-c a m") 'tag-around-member)
  (local-set-key (kbd "C-c a p") 'tag-around-pl)
  (local-set-key (kbd "C-c a n") 'tag-around-span)
  (local-set-key (kbd "C-c a s") 'tag-around-segment)
  (local-set-key (kbd "C-c a t") 'tag-around-term)
  (local-set-key (kbd "C-c a v") 'tag-around-verse)
  (local-set-key (kbd "C-c i e") 'tag-insert-en)
  (local-set-key (kbd "C-c i f") 'tag-insert-fr)
  (local-set-key (kbd "C-c i g") 'tag-insert-gr)
  (local-set-key (kbd "C-c i m") 'tag-insert-member)
  (local-set-key (kbd "C-c i p") 'tag-insert-pl)
  (local-set-key (kbd "C-c i n") 'tag-insert-span)
  (local-set-key (kbd "C-c i s") 'tag-insert-segment)
  (local-set-key (kbd "C-c i t") 'tag-insert-term)
  (local-set-key (kbd "C-c i v") 'tag-insert-verse)
  (local-set-key (kbd "C-c 0") 'insert-span-inside-term)
  (local-set-key (kbd "C-c 1") 'extract-first-words-into-span)
  (local-set-key (kbd "C-c SPC") (lambda()(interactive)(insert "&#32;")))
  (local-set-key (kbd "C-s-= a") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fa")))
  (local-set-key (kbd "C-s-= b") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fb")))
  (local-set-key (kbd "C-s-= c") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fc")))
  (local-set-key (kbd "C-s-= d") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fd")))
  (local-set-key (kbd "C-s-= e") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fe")))
  (local-set-key (kbd "C-s-= f") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "ff")))
  (local-set-key (kbd "C-s-= g") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fg")))
  (local-set-key (kbd "C-s-= h") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fh")))
  (local-set-key (kbd "C-s-= i") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fi")))
  (local-set-key (kbd "C-s-= j") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fj")))
  (local-set-key (kbd "C-s-= k") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fk")))
  (local-set-key (kbd "C-s-= l") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fl")))
  (local-set-key (kbd "C-s-= m") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fm")))
  (local-set-key (kbd "C-s-= n") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fn")))
  (local-set-key (kbd "C-s-= o") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fo")))
  (local-set-key (kbd "C-s-= p") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fp")))
  (local-set-key (kbd "C-s-= q") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fq")))
  (local-set-key (kbd "C-s-= r") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fr")))
  (local-set-key (kbd "C-s-= s") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fs")))
  (local-set-key (kbd "C-s-= t") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "ft")))
  (local-set-key (kbd "C-s-= v") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fv")))
  (local-set-key (kbd "C-s-= w") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fw")))
  (local-set-key (kbd "C-s-= x") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fx")))
  (local-set-key (kbd "C-s-= y") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fy")))
  (local-set-key (kbd "C-s-= z") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fz")))
  (local-set-key (kbd "C-s-= ;") (lambda()(interactive)(set-or-replace-term-or-span-class "pas" nil)))
  (local-set-key (kbd "C-s-] a") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fa")))
  (local-set-key (kbd "C-s-] b") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fb")))
  (local-set-key (kbd "C-s-] c") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fc")))
  (local-set-key (kbd "C-s-] d") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fd")))
  (local-set-key (kbd "C-s-] e") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fe")))
  (local-set-key (kbd "C-s-] f") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "ff")))
  (local-set-key (kbd "C-s-] g") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fg")))
  (local-set-key (kbd "C-s-] h") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fh")))
  (local-set-key (kbd "C-s-] i") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fi")))
  (local-set-key (kbd "C-s-] j") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fj")))
  (local-set-key (kbd "C-s-] k") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fk")))
  (local-set-key (kbd "C-s-] l") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fl")))
  (local-set-key (kbd "C-s-] m") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fm")))
  (local-set-key (kbd "C-s-] n") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fn")))
  (local-set-key (kbd "C-s-] o") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fo")))
  (local-set-key (kbd "C-s-] p") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fp")))
  (local-set-key (kbd "C-s-] q") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fq")))
  (local-set-key (kbd "C-s-] r") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fr")))
  (local-set-key (kbd "C-s-] s") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fs")))
  (local-set-key (kbd "C-s-] t") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "ft")))
  (local-set-key (kbd "C-s-] v") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fv")))
  (local-set-key (kbd "C-s-] w") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fw")))
  (local-set-key (kbd "C-s-] x") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fx")))
  (local-set-key (kbd "C-s-] y") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fy")))
  (local-set-key (kbd "C-s-] z") (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fz")))
  (local-set-key (kbd "C-s-] ;") (lambda()(interactive)(set-or-replace-term-or-span-class "par" nil)))
  (local-set-key (kbd "C-s-' a") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fa")))
  (local-set-key (kbd "C-s-' b") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fb")))
  (local-set-key (kbd "C-s-' c") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fc")))
  (local-set-key (kbd "C-s-' d") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fd")))
  (local-set-key (kbd "C-s-' e") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fe")))
  (local-set-key (kbd "C-s-' f") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "ff")))
  (local-set-key (kbd "C-s-' g") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fg")))
  (local-set-key (kbd "C-s-' h") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fh")))
  (local-set-key (kbd "C-s-' i") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fi")))
  (local-set-key (kbd "C-s-' j") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fj")))
  (local-set-key (kbd "C-s-' k") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fk")))
  (local-set-key (kbd "C-s-' l") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fl")))
  (local-set-key (kbd "C-s-' m") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fm")))
  (local-set-key (kbd "C-s-' n") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fn")))
  (local-set-key (kbd "C-s-' o") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fo")))
  (local-set-key (kbd "C-s-' p") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fp")))
  (local-set-key (kbd "C-s-' q") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fq")))
  (local-set-key (kbd "C-s-' r") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fr")))
  (local-set-key (kbd "C-s-' s") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fs")))
  (local-set-key (kbd "C-s-' t") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "ft")))
  (local-set-key (kbd "C-s-' v") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fv")))
  (local-set-key (kbd "C-s-' w") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fw")))
  (local-set-key (kbd "C-s-' x") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fx")))
  (local-set-key (kbd "C-s-' y") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fy")))
  (local-set-key (kbd "C-s-' z") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fz")))
  (local-set-key (kbd "C-s-' ;") (lambda()(interactive)(set-or-replace-term-or-span-class "pie" nil)))
  (local-set-key (kbd "C-s-/ a") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fa")))
  (local-set-key (kbd "C-s-/ b") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fb")))
  (local-set-key (kbd "C-s-/ c") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fc")))
  (local-set-key (kbd "C-s-/ d") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fd")))
  (local-set-key (kbd "C-s-/ e") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fe")))
  (local-set-key (kbd "C-s-/ f") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "ff")))
  (local-set-key (kbd "C-s-/ g") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fg")))
  (local-set-key (kbd "C-s-/ h") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fh")))
  (local-set-key (kbd "C-s-/ i") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fi")))
  (local-set-key (kbd "C-s-/ j") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fj")))
  (local-set-key (kbd "C-s-/ k") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fk")))
  (local-set-key (kbd "C-s-/ l") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fl")))
  (local-set-key (kbd "C-s-/ m") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fm")))
  (local-set-key (kbd "C-s-/ n") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fn")))
  (local-set-key (kbd "C-s-/ o") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fo")))
  (local-set-key (kbd "C-s-/ p") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fp")))
  (local-set-key (kbd "C-s-/ q") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fq")))
  (local-set-key (kbd "C-s-/ r") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fr")))
  (local-set-key (kbd "C-s-/ s") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fs")))
  (local-set-key (kbd "C-s-/ t") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "ft")))
  (local-set-key (kbd "C-s-/ v") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fv")))
  (local-set-key (kbd "C-s-/ w") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fw")))
  (local-set-key (kbd "C-s-/ x") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fx")))
  (local-set-key (kbd "C-s-/ y") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fy")))
  (local-set-key (kbd "C-s-/ z") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fz")))
  (local-set-key (kbd "C-s-/ ;") (lambda()(interactive)(set-or-replace-term-or-span-class "seg" nil)))
  )

(add-hook 'mhtml-mode-hook 'xmlhtml-modes-customizations)
(add-hook 'nxml-mode-hook 'xmlhtml-modes-customizations)

(define-minor-mode rbs-skeletons-minor-mode
  "Toggle rbs skeletons minor mode."
  nil
  " RbsSkeletons"
  '(
    ("e" . insert-tag-en)
    ("f" . insert-tag-fr)
    ("g" . insert-tag-gr)
    ("m" . insert-tag-member)
    ("p" . insert-tag-pl)
    ("n" . insert-tag-span)
    ("s" . insert-tag-segment)
    ("t" . insert-tag-term)
    ("v" . insert-tag-verse)
    ("c" . insert-comment)
    ("G" . insert-term-span-gr)
    ("`" . (lambda()(interactive)(rbs-skeletons-minor-mode -1)))
    ))
(global-set-key (kbd "C-M-s-\\") 'rbs-skeletons-minor-mode)

(define-minor-mode passage-colors-minor-mode
  "Toggle set passage colors minor mode. When mode is enabled, certain letter keys add passage-level classes"
  nil
  " PassageColors"
  '(
    ("a" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fa")))
    ("b" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fb")))
    ("c" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fc")))
    ("d" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fd")))
    ("e" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fe")))
    ("f" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "ff")))
    ("g" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fg")))
    ("h" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fh")))
    ("i" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fi")))
    ("j" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fj")))
    ("k" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fk")))
    ("l" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fl")))
    ("m" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fm")))
    ("n" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fn")))
    ("o" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fo")))
    ("p" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fp")))
    ("q" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fq")))
    ("r" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fr")))
    ("s" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fs")))
    ("t" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "ft")))
    ("v" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fv")))
    ("w" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fw")))
    ("x" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fx")))
    ("y" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fy")))
    ("z" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" "fz")))
    (";" . (lambda()(interactive)(set-or-replace-term-or-span-class "pas" nil)))
    ("`" . (lambda()(interactive)(passage-colors-minor-mode -1)))
    ("=" . (lambda()(interactive)))
    ("]" . (lambda()(interactive)(passage-colors-minor-mode -1)(part-colors-minor-mode nil)))
    ("'" . (lambda()(interactive)(passage-colors-minor-mode -1)(piece-colors-minor-mode nil)))
    ("/" . (lambda()(interactive)(passage-colors-minor-mode -1)(segment-colors-minor-mode nil)))
    ))
(global-set-key (kbd "C-M-s-=") 'passage-colors-minor-mode)

(define-minor-mode part-colors-minor-mode
  "Toggle set part colors minor mode. When mode is enabled, certain letter keys add part-level classes"
  nil
  " PartColors"
  '(
    ("a" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fa")))
    ("b" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fb")))
    ("c" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fc")))
    ("d" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fd")))
    ("e" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fe")))
    ("f" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "ff")))
    ("g" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fg")))
    ("h" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fh")))
    ("i" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fi")))
    ("j" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fj")))
    ("k" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fk")))
    ("l" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fl")))
    ("m" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fm")))
    ("n" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fn")))
    ("o" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fo")))
    ("p" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fp")))
    ("q" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fq")))
    ("r" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fr")))
    ("s" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fs")))
    ("t" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "ft")))
    ("v" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fv")))
    ("w" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fw")))
    ("x" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fx")))
    ("y" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fy")))
    ("z" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" "fz")))
    (";" . (lambda()(interactive)(set-or-replace-term-or-span-class "par" nil)))
    ("`" . (lambda()(interactive)(part-colors-minor-mode -1)))
    ("=" . (lambda()(interactive)(part-colors-minor-mode -1)(passage-colors-minor-mode nil)))
    ("]" . (lambda()(interactive)))
    ("'" . (lambda()(interactive)(part-colors-minor-mode -1)(piece-colors-minor-mode nil)))
    ("/" . (lambda()(interactive)(part-colors-minor-mode -1)(segment-colors-minor-mode nil)))
    ))
(global-set-key (kbd "C-M-s-]") 'part-colors-minor-mode)

(define-minor-mode piece-colors-minor-mode
  "Toggle set piece colors minor mode. When mode is enabled, certain letter keys add piece-level classes"
  nil
  " PieceColors"
  '(
    ("a" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fa")))
    ("b" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fb")))
    ("c" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fc")))
    ("d" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fd")))
    ("e" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fe")))
    ("f" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "ff")))
    ("g" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fg")))
    ("h" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fh")))
    ("i" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fi")))
    ("j" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fj")))
    ("k" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fk")))
    ("l" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fl")))
    ("m" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fm")))
    ("n" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fn")))
    ("o" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fo")))
    ("p" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fp")))
    ("q" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fq")))
    ("r" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fr")))
    ("s" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fs")))
    ("t" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "ft")))
    ("v" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fv")))
    ("w" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fw")))
    ("x" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fx")))
    ("y" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fy")))
    ("z" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" "fz")))
    (";" . (lambda()(interactive)(set-or-replace-term-or-span-class "pie" nil)))
    ("`" . (lambda()(interactive)(piece-colors-minor-mode -1)))
    ("=" . (lambda()(interactive)(piece-colors-minor-mode -1)(passage-colors-minor-mode nil)))
    ("]" . (lambda()(interactive)(piece-colors-minor-mode -1)(part-colors-minor-mode nil)))
    ("'" . (lambda()(interactive)))
    ("/" . (lambda()(interactive)(piece-colors-minor-mode -1)(segment-colors-minor-mode nil)))
    ))
(global-set-key (kbd "C-M-s-'") 'piece-colors-minor-mode)

(define-minor-mode segment-colors-minor-mode
  "Toggle set segment colors minor mode. When mode is enabled, certain letter keys add segment-level classes"
  nil
  " SegmentColors"
  '(
    ("a" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fa")))
    ("b" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fb")))
    ("c" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fc")))
    ("d" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fd")))
    ("e" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fe")))
    ("f" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "ff")))
    ("g" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fg")))
    ("h" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fh")))
    ("i" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fi")))
    ("j" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fj")))
    ("k" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fk")))
    ("l" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fl")))
    ("m" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fm")))
    ("n" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fn")))
    ("o" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fo")))
    ("p" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fp")))
    ("q" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fq")))
    ("r" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fr")))
    ("s" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fs")))
    ("t" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "ft")))
    ("v" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fv")))
    ("w" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fw")))
    ("x" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fx")))
    ("y" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fy")))
    ("z" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" "fz")))
    (";" . (lambda()(interactive)(set-or-replace-term-or-span-class "seg" nil)))
    ("`" . (lambda()(interactive)(segment-colors-minor-mode -1)))
    ("=" . (lambda()(interactive)(segment-colors-minor-mode -1)(passage-colors-minor-mode nil)))
    ("]" . (lambda()(interactive)(segment-colors-minor-mode -1)(part-colors-minor-mode nil)))
    ("'" . (lambda()(interactive)(segment-colors-minor-mode -1)(piece-colors-minor-mode nil)))
    ("/" . (lambda()(interactive)))
    ))
(global-set-key (kbd "C-M-s-/") 'segment-colors-minor-mode)
